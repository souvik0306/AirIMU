import argparse
import os
import pickle
import numpy as np
import torch
import pypose as pp


def load_results(path):
    with open(path, "rb") as f:
        chunks = pickle.load(f)
    if not isinstance(chunks, list):
        raise ValueError("Expected a list of inference chunks")
    acc = np.concatenate([c["corrected_acc"] for c in chunks], axis=0)
    gyro = np.concatenate([c["corrected_gyro"] for c in chunks], axis=0)
    dt = np.concatenate([c["dt"] for c in chunks], axis=0)
    return acc, gyro, dt


def integrate(acc, gyro, dt, device="cpu"):
    acc_t = torch.from_numpy(acc).to(device).double()[None]
    gyro_t = torch.from_numpy(gyro).to(device).double()[None]
    dt_t = torch.from_numpy(dt).to(device).double()[None]

    init = {
        "pos": torch.zeros(1, 1, 3, dtype=torch.float64, device=device),
        "vel": torch.zeros(1, 1, 3, dtype=torch.float64, device=device),
        "rot": pp.SO3.identity(1, 1).to(device),
    }

    integrator = pp.module.IMUPreintegrator(
        init["pos"], init["rot"], init["vel"], reset=False
    ).to(device).double()

    state = integrator(dt=dt_t, gyro=gyro_t, acc=acc_t)
    return {
        "pos": state["pos"][0].cpu().numpy(),
        "vel": state["vel"][0].cpu().numpy(),
        "rot": state["rot"][0].cpu().numpy(),
    }


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--pickle", type=str, default="results/net_output.pickle",
        help="Path to net_output.pickle generated by the ROS inference node",
    )
    parser.add_argument(
        "--out", type=str, default="results/state_output.pickle",
        help="Where to save integrated pose/velocity/orientation",
    )
    parser.add_argument(
        "--device", type=str, default="cpu",
        help="Computation device",
    )
    args = parser.parse_args()

    acc, gyro, dt = load_results(args.pickle)
    state = integrate(acc, gyro, dt, device=args.device)

    os.makedirs(os.path.dirname(args.out), exist_ok=True)
    with open(args.out, "wb") as f:
        pickle.dump(state, f, protocol=pickle.HIGHEST_PROTOCOL)
    print(f"Saved state to {args.out}")


if __name__ == "__main__":
    main()
